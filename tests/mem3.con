; assertions to be verified
 (join dStall iStall) <: pipeInhibit     ; assign pipeInhibit = (dStall)|(iStall) @mem3.v:329
(Iin==iDataRamMuxOut)  =>  (join iDataRamMuxOut iStall) <: Iin     ; Iin = iDataRamMuxOut @mem3.v:341
(Iin==0)  =>  iStall <: Iin     ; Iin = 0 @mem3.v:341
(isLoad==1)  =>  H <: H     ; cacheOut = dDataRamMuxOut @mem3.v:344
(Not(isLoad==1))  =>  isLoad <: H     ; cacheOut = 0 @mem3.v:344
(Dsize==0)  =>  (join MAR Dsize) <: sa     ; sa = ((~(MAR))&(3))<<(3) @mem3.v:381
(sa==0) (Not(Dsize==0))  =>  Dsize <: sa     ; sa = 0 @mem3.v:381
(Dsize==1)  =>  (join MAR Dsize) <: sa     ; sa = (((~(MAR))>>(1))&(1))<<(4) @mem3.v:382
(sa==0) (Not(Dsize==1))  =>  Dsize <: sa     ; sa = 0 @mem3.v:382
(Dsize==2) (sa==0)  =>  Dsize <: sa     ; sa = 0 @mem3.v:383
(sa==0) (Not(Dsize==2))  =>  Dsize <: sa     ; sa = 0 @mem3.v:383
(Dsize==0)  =>  (join sa Dsize) <: mask     ; mask = (255)<<(sa) @mem3.v:386
(mask==0) (Not(Dsize==0))  =>  Dsize <: mask     ; mask = 0 @mem3.v:386
(Dsize==1)  =>  (join sa Dsize) <: mask     ; mask = (65535)<<(sa) @mem3.v:387
(Not(Dsize==1)) (mask==0)  =>  Dsize <: mask     ; mask = 0 @mem3.v:387
(Dsize==2) (mask==0)  =>  Dsize <: mask     ; mask = 0 @mem3.v:388
(mask==0) (Not(Dsize==2))  =>  Dsize <: mask     ; mask = 0 @mem3.v:388
 (join (join dTagRamOutLow MAR) dStateRamOutLow) <: dHit0     ; assign dHit0 = (dTagRamOutLow[0]==MAR[31:13])&(dStateRamOutLow[0][0]) @mem3.v:406
 (join (join dTagRamOutLow MAR) dStateRamOutLow) <: dHit1     ; assign dHit1 = (dTagRamOutLow[1]==MAR[31:13])&(dStateRamOutLow[1][0]) @mem3.v:407
 H <: H     ; assign dHit2 = (dTagRamOutHigh[0]==MAR[31:13])&(dStateRamOutHigh[0][0]) @mem3.v:408
 H <: H     ; assign dHit3 = (dTagRamOutHigh[1]==MAR[31:13])&(dStateRamOutHigh[1][0]) @mem3.v:409
 H <: H     ; assign dHitNaive = (((dHit0)|(dHit1))|(dHit2))|(dHit3) @mem3.v:411
(ReadLabel==0) (dHit==1)  =>  (join (join dHit0 dHit1) ReadLabel) <: dHit     ; dHit = 1 @mem3.v:413
(ReadLabel==0) (dHit==0)  =>  (join (join dHit0 dHit1) ReadLabel) <: dHit     ; dHit = 0 @mem3.v:413
(Not(ReadLabel==0)) (dHit==1)  =>  H <: dHit     ; dHit = 1 @mem3.v:414
(Not(ReadLabel==0)) (dHit==0)  =>  H <: dHit     ; dHit = 0 @mem3.v:414
(dHit0==1)  =>  H <: H     ; dDataRamMuxOut = dDataRamOutLow[0] @mem3.v:416
(Not(dHit0==1)) (dHit1==1)  =>  H <: H     ; dDataRamMuxOut = dDataRamOutLow[1] @mem3.v:417
(Not(dHit0==1)) (dHit2==1) (Not(dHit1==1))  =>  H <: H     ; dDataRamMuxOut = dDataRamOutHigh[0] @mem3.v:418
(Not(dHit0==1)) (Not(dHit1==1)) (Not(dHit2==1)) (dHit3==1)  =>  H <: H     ; dDataRamMuxOut = dDataRamOutHigh[1] @mem3.v:419
(Not(dHit0==1)) (Not(dHit1==1)) (Not(dHit3==1)) (Not(dHit2==1))  =>  H <: H     ; dDataRamMuxOut = 0 @mem3.v:419
 (join (join isLoad isStore) (join dHit dFsmState)) <: dStall     ; assign dStall = ((isLoad)|(isStore))&((~(dHit))|(Not( dFsmState==DFSM_IDLE))) @mem3.v:421
 MAR <: dTagRamIndex     ; assign dTagRamIndex = MAR[12:5] @mem3.v:424
 MAR <: dTagRamIn     ; assign dTagRamIn = MAR[31:13] @mem3.v:425
(dFsmState==DFSM_STOREHIT)  =>  (join rMAR dFsmState) <: dStateRamIndex     ; dStateRamIndex = rMAR[12:5] @mem3.v:427
(Not(dFsmState==DFSM_STOREHIT))  =>  (join MAR dFsmState) <: dStateRamIndex     ; dStateRamIndex = MAR[12:5] @mem3.v:427
(dFsmState==DFSM_STOREHIT)  =>  (join rMAR dFsmState) <: dDataRamIndex     ; dDataRamIndex = rMAR[12:5] @mem3.v:429
(Not(dFsmState==DFSM_STOREHIT))  =>  (join MAR dFsmState) <: dDataRamIndex     ; dDataRamIndex = MAR[12:5] @mem3.v:429
(dFsmState==DFSM_REFILL)  =>  (join dOffset dFsmState) <: dDataRamOffset     ; dDataRamOffset = dOffset[(3)-(1):0] @mem3.v:430
(Not(dFsmState==DFSM_REFILL)) (dFsmState==DFSM_WRITEBACK)  =>  (join dOffset dFsmState) <: dDataRamOffset     ; dDataRamOffset = dOffset[(3)-(1):0] @mem3.v:431
(Not(dFsmState==DFSM_WRITEBACK)) (Not(dFsmState==DFSM_REFILL)) (dFsmState==DFSM_STOREHIT)  =>  (join rMAR dFsmState) <: dDataRamOffset     ; dDataRamOffset = rMAR[4:2] @mem3.v:432
(Not(dFsmState==DFSM_WRITEBACK)) (Not(dFsmState==DFSM_REFILL)) (Not(dFsmState==DFSM_STOREHIT))  =>  (join MAR dFsmState) <: dDataRamOffset     ; dDataRamOffset = MAR[4:2] @mem3.v:432
(dWriteWay==0)  =>  H <: H     ; dMemBus = dDataRamOutLow[0] @mem3.v:435
(dWriteWay==1) (Not(dWriteWay==0))  =>  H <: H     ; dMemBus = dDataRamOutLow[1] @mem3.v:436
(Not(dWriteWay==0)) (dWriteWay==2) (Not(dWriteWay==1))  =>  H <: H     ; dMemBus = dDataRamOutHigh[0] @mem3.v:437
(Not(dWriteWay==0)) (Not(dWriteWay==2)) (Not(dWriteWay==1)) (dWriteWay==3)  =>  H <: H     ; dMemBus = dDataRamOutHigh[1] @mem3.v:438
(dWriteWay==1) (Not(dWriteWay==0)) (Not(dWriteWay==3)) (Not(dWriteWay==2)) (Not(dWriteWay==1))  =>  L <: H     ; dMemBus = 0 @mem3.v:438
(dWriteWay==3) (Not(dWriteWay==0)) (Not(dWriteWay==3)) (Not(dWriteWay==2)) (Not(dWriteWay==1))  =>  H <: H     ; dMemBus = 0 @mem3.v:438
(dWriteWay==2) (Not(dWriteWay==0)) (Not(dWriteWay==3)) (Not(dWriteWay==2)) (Not(dWriteWay==1))  =>  H <: H     ; dMemBus = 0 @mem3.v:438
(dWriteWay==0) (Not(dWriteWay==0)) (Not(dWriteWay==3)) (Not(dWriteWay==2)) (Not(dWriteWay==1))  =>  L <: H     ; dMemBus = 0 @mem3.v:438
(And (And (And (dFsmState==DFSM_REFILL , dHit==0) , ReadLabel==0) , dHitNaive==1))  =>  H <: H     ; dDataRamInv2 = dDataRamMuxOut @mem3.v:440
(Not(And (And (And (dFsmState==DFSM_REFILL , dHit==0) , ReadLabel==0) , dHitNaive==1)))  =>  H <: H     ; dDataRamInv2 = dDataRamIn @mem3.v:440
(MRST==1)  =>  L <: H     ; CPU.numLoads <= 0 @mem3.v:306
(MRST==1)  =>  L <: H     ; CPU.numStores <= 0 @mem3.v:307
 H <: H     ; CPU.numLoads <= (CPU.numLoads)+(1) @mem3.v:311
 H <: H     ; CPU.numStores <= (CPU.numStores)+(1) @mem3.v:314
(pcInhibit==0) (MRST==1)  =>  L <: pcInhibit     ; pcInhibit <= 0 @mem3.v:333
(pcInhibit==pipeInhibit) (Not(MRST==1))  =>  pipeInhibit <: pcInhibit     ; pcInhibit <= pipeInhibit @mem3.v:336
(isLoad==1)  =>  I3 <: isLoad     ; isLoad = 1 @mem3.v:355
(isLoad==0)  =>  I3 <: isLoad     ; isLoad = 0 @mem3.v:358
(isStore==1)  =>  I3 <: isStore     ; isStore = 1 @mem3.v:362
(isStore==0)  =>  I3 <: isStore     ; isStore = 0 @mem3.v:365
(Dsize==1)  =>  I3 <: Dsize     ; Dsize = 1 @mem3.v:370
(Dsize==0)  =>  I3 <: Dsize     ; Dsize = 0 @mem3.v:373
(Dsize==2)  =>  I3 <: Dsize     ; Dsize = 2 @mem3.v:376
(rMAR==0) (MRST==1)  =>  L <: rMAR     ; rMAR <= 0 @mem3.v:393
(rMAR==MAR) (Not(MRST==1))  =>  MAR <: rMAR     ; rMAR <= MAR @mem3.v:396
